{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"console_commands/","title":"IOT Node - LoRaWAN - Console Commands","text":"<p>The serial console interactive menu system of the IoT Node - LoRaWAN an intuitive, dynamic and flexible methodology to interact with the system configuration.While extremely capable, when performing common admin or debugging tasks the menu system is an impediment to the desired operation. A fast, interactive solution is needed.</p> <p>To provide rapid access to common administration and debugging commands, the IoT Node - LoRaWAN firmware provides a set of commands that are entered directly into the console. Starting with a \"!\" (bang), these commands are referred to as Console Commands or Bang Commands.</p>"},{"location":"console_commands/#available-commands","title":"Available Commands","text":"<p>The following commands are available:</p> Command Description !reset-device-forced Resets the device (clears settings and restarts the device) without a prompt !reset-device Resets the device (clears settings and restarts the device) with a [Yes/No] prompt !clear-settings Clears the on-device saved settings with a [Yes/No] prompt !clear-settings-forced Clears the on-device saved settings without a prompt !restart Restarts the device with a [Yes/No] prompt !restart-forced Restarts the device without a prompt !log-rate Outputs the current log-rate of the device (milliseconds between logging transactions) !log-rate-toggle Toggle the on/off state of the log rate data recording by the system. This value is not persisted to on-board settings unless the settings are saved. !devices Lists the currently connected devices !save-settings Saves the current system settings to the preference system !verbose Toggles Verbose output/message mode. This value is not persistent !heap Outputs the current statistics of the system heap memory !log-now Trigger a data logging event !lora-status Display the status and settings of the LoRaWAN !about Outputs the full About page of the Node Board !version Outputs the firmware version !help Outputs the available ! commands"},{"location":"console_commands/#command-usage","title":"Command Usage","text":"<p>To use a Bang Command, connect to the target IoT Node - LoRaWAN device via a serial console. and enter the command, starting with a <code>!</code> symbol  Entering any other character will launch the standard DataLogger IoT menu system. When the <code>!</code> symbol is pressed, a prompt &gt; should appear. </p> <p>Note: Since most Bang Commands are not interactive, they also enable commanding by another device, such as a computer attached to the IoT Node board.</p>"},{"location":"data_encoding/","title":"LoRaWAN Data Encoding","text":"<p>To achieve incredible low-power and long-range performance, a LoRaWAN end node minimizes the size of data packets sent across the LoRa network. While the size of a data packet is adjustable based on specific performance needs and network deployment topology, for maximum flexibility, the SparkFun IoT Node - LoRaWAN firmware uses a packet payload size of 11 bytes. This relativity small payload length is a challenge for a general data-logging application and requires that the firmware develop a unique data packing methodology to meet the general data logging goals of the implementation.</p>"},{"location":"data_encoding/#value-packing-structure","title":"Value Packing Structure","text":"<p>The IoT Node - LoRaWAN firmware employs a simple tagged format to pack and send sensor data across the LoRaWAN network. The key element to this methodology is the tag, which is defined a \"Value Type\" for the implementation used for sending data. The Value Type tag is followed by the data value, which is formatted for network transport.</p> <p>The general structure of a packed value is:</p> <p>[ Value Type {1 byte} ][Data Value {n bytes - network byte order }]</p>"},{"location":"data_encoding/#value-type","title":"Value Type","text":"<p>Key attributes of a \"Value Type\" tag/code:</p> <ul> <li>There is a common set of \"Value Type\" code IDs - each code identifies a value, which is defined as a specific measured value/phenomenology and its associated units.</li> <li>The \"Value Type\" codes are known by both sender and receiver of a data value</li> <li>The length of a data value is defined by it's Value Type.</li> <li>Data types supported: unit8, uint16, unit32, int8, int16, int32, float and double</li> </ul>"},{"location":"data_encoding/#data-formatting","title":"Data Formatting","text":"<p>When a data value is \"packed\", for multi-byte values, the data is encoded for network endianness (big-endian format).</p> <p>The following table outlines how a data value is packed, based on it's data type size:</p> Data Type Length (bytes) Format Used int8 1 No format applied int16 2 Network Byte Order (2 bytes) int32 4 Network Byte Order (4 bytes) uint8 1 No format applied uint16 2 Network Byte Order (2 bytes) uint32 4 Network Byte Order (4 bytes) float 4 Network Byte Order (4 bytes) double 8 [ Network Byte Order (4 bytes) ][ Network Byte Order (4 bytes) ]"},{"location":"data_encoding/#packet-encoding","title":"Packet Encoding","text":"<p>When packing a data value in the LoRaWAN packet payload, which has a total of 11 bytes available, data values are formatted as described in the previous section and added to the payload until no further space is available. When the payload is full (no free space available for the next data value), it is sent to the LoRaWAN network.</p> <p>So for a 11 byte LoRaWAN Payload buffer, the contents could be (note a Value Type is 1 byte):</p> <ul> <li>[ Value Type][Data Value {4 bytes}][ Value Type][Data Value {4 bytes}][empty {1 byte}]  = 10 bytes used</li> <li>[ Value Type][Data Value {2 bytes}][ Value Type][Data Value {4 bytes}][empty {3 byte}]  = 8 bytes used*</li> <li>[ Value Type][Data Value {2 bytes}][ Value Type][Data Value {4 bytes}][ Value Type][Data Value {2 bytes}] =  11 bytes used</li> </ul> <p>The following example uses verbose output from a data collection and send event to show how the data is packed:</p> <p></p> <p>In this image, the Value Type IDs and encoded for each value is highlighted individually and as part of the packed data payload.</p> <p>The general payload packing is as follows:</p>"},{"location":"data_encoding/#initial-condition","title":"Initial Condition","text":"<ul> <li>Set the current position in the payload to position 0</li> </ul>"},{"location":"data_encoding/#operation","title":"Operation","text":"<p>1) Data Packet is formatted 1) If no room is available in the payload     * The data payload is sent to the LoRaWAN     * The payload buffer set to position 0 1) The data packet is added to the payload buffer 1) The current position in in the payload is incremented by the size of the data packet 1) Repeat step 1) until all data is sent</p>"},{"location":"data_encoding/#end-condition","title":"End Condition","text":"<ul> <li>Flush the payload buffer - send any pending data to the LoRaWAN</li> </ul>"},{"location":"data_encoding/#sensor-and-data-value-encodings","title":"Sensor and Data Value Encodings","text":"<p>The following table outlines the sensors and data encoding used by the IoT Node - LoRaWAN firmware:</p> Sensor Parameter Value Type Value Type Code Data Type BME688 Humidity Humidity_F 8 float Temperature C TempC 10 float Pressure Pressure_F 9 float BME280 Humidity Humidity_F 8 float Temperature F TempF 11 float Temperature C TempC 10 float BMP384 Temperature C TempC_D 50 double Presure (Pa) Pressure_D 51 double BMP581 Pressure (Pa) Pressure_F 9 float Temperature C TempC 10 float CCS811 CO2 CO2_F 13 float VOC TVOC 12 float ENS160 Equivalent CO2 CO2 6 uint16 TVOC VOC 4 unit16 Ethanol Concentration ETOH uint16 Air Quality Index AQI 5 uint8 FS3000 Flow (MPS) MPS 14 float FLow (MPH) MPH 15 float GNSS Latitude in Degrees Latitude 16 double Longitude in Degrees Longitude 17 double Altitude (meters) Altitude 18 double ISM330 Accelerometer X (milli-g) AccelX 19 float Accelerometer Y (milli-g) AccelY 20 float Accelerometer Z (milli-g) AccelZ 21 float Gyro X (milli-dps) GyroX 22 float Gyro Y (milli-dps) GyroY 23 float Gyro Z (milli-dps) GyroZ 24 float LPS25HB Pressure (hPa) Pressure_F 9 float Temperature C TempC 10 float MAX17048 Voltage (V) BatteryVoltage 48 float State Of Charge (%) BatteryCharge 47 float Change Rate (%/hr) BatteryChargeRate 49 float Micro Pressure Pressure (Pa) Pressure_F 9 float MS5637 Pressure (mBar) Pressure_mBar 25 float Temperature C TempC 10 float NAU7802 Weight WeightUserUnits 26 float OPT4048 CIEx CIE_X 27 double CIEy CIE_Y 28 double CIET CCT 29 double RV8803 RTC Epoch Epoch 31 uint32 SCD40 CO2 Sensor CO2 (PPM) CO2_U32 32 uint32 Temperature (C) TempC 10 float Humidity (%RH) Humidity_F 8 float SGP30 Air Quality Sensor CO2 (PPM) CO2_U32 32 uint32 TVOC (PPB) TVOC_U32 33 uint32 H2 (PPM) H2 34 uint32 Ethanol (PPM) ETOH_U32 35 uint32 SGP40 Air Quality Sensor TVOC (PPB) TVOC_U32 33 uint32 SHTC3 Humidity and Temperature Sensor Temperature (F) TempF 11 float Temperature (C) TempC 10 float Humidity (%RH) Humidity_F 8 float STC31 CO2 Sensor CO2 (%) CO2_F 13 float Temperature (C) TempC 10 float Human Presence Sensor Presence (cm^-1) Presence 36 int16 Motion (LSB) Motion 37 int16 TMP117 Precision Temperature Sensor Temperature (C) TempC 10 float VCNL4040 Proximity Sensor Proximity Proximity 38 uint16 Lux LUX_U16 39 uint16 VEML6075 UV Sensor UVA Level UVAIndex 40 float UVB Level UVBIndex 41 float UV Index UVIndex 42 float VEML7700 Ambient Light Sensor Ambient Light Level AmbientLight 44 uint32 White Level WhiteLight 45 uint32 Lux LUX_F 43 float VL53L1X Distance Sensor Distance (mm) Distance 46 unit32"},{"location":"getting_started/","title":"Getting Started","text":"<p>The SparkFun IoT Node - LoRaWAN firmware is designed to enable rapid setup and connection to the Digi LoRaWAN network or the Digi X-ON system. The SparkFun IoT Node - LoRaWAN board is pre-provisioned with the necessary keys to connect to Digi X-ON, and the default XON Application ID for the demo application is set as default within the IOT Node - LoRaWAN firmware. From the board standpoint, once the Digi module is registered with a XON account, all that is required is to connect the antenna, a supported qwiic sensor and apply power to the board. </p>"},{"location":"getting_started/#setting-up-your-digi-x-on-account-and-gateway","title":"Setting up your Digi X-ON account and Gateway","text":"<p>To get started, you'll need to have access to an HX15 Gateway (NA or EU version) and a Digi Account. If you've purchased the kit, a Gateway will be included. Digi has a great \"Getting Started\" video here. The kit also has a welcome card included that contains a QR Code. Scanning this code will take you to a URL where you can register for an account.</p>"},{"location":"getting_started/#registering-the-iot-node-lorawan","title":"Registering the IoT Node - LoRaWAN","text":""},{"location":"getting_started/#provisioning","title":"Provisioning","text":"<p>To provision a IoT Node - LoRaWAN device, go to the following link, log in if necessary, and scan the Data Matrix on the XBee Module using the Digi Scan page. </p> <p>Note - if the DataMatrix scan is out-of-focus and unable to resolve, wait a few seconds and a manual entry prompt will appear on Digi Scan. From here you manually enter the modules serial number. </p> <p>Using the mobile interface, the module registration scan has the following appearance, with a provisioning screen shown once the data module is detected:</p> <p></p> <p>Once scanned, attributes are entered and the Application for the board selected - in this case the application is Sparkfun IoT Node:</p> <p>And once the PROVISION button is pressed, the following status/steps are show in the application as the module is provisioned...</p> <p></p> <p>After you device is registered with your account, it will be listed in the device section of you XON account.</p> <p></p> <p>Device listing</p> <p></p> <p>From the specific device page, the messages sent by the device are listed. The Data column contains the message data.</p> <p></p> <p>With the highlighted corresponding sent messages reported on the output of the IoT Node board:</p> <p></p>"},{"location":"getting_started/#troubleshooting-and-notes","title":"Troubleshooting and Notes","text":""},{"location":"getting_started/#if-the-node-board-fails-to-connect","title":"If the Node Board Fails to Connect","text":"<ul> <li>Make sure your Digi XON gateway is powered on, connected and connected to a network</li> <li>Verify that the LoRa Antenna is property connected to the IOT Node - LoRaWAN board</li> </ul>"},{"location":"getting_started/#application-id-or-key-error-message-printed-at-startup","title":"Application ID or Key Error message printed at startup","text":"<p>While not often, this has been seen with some new boards. Restarting the board a couple of times often resoles this issue.</p> <p>If it persists, verify the values being used via the settings menu. If need be, reset the board via the menu system to clear out any invalid value.</p> <p>Note: The Application and Network Key values are secret, and as such stored securely on the device and not visible once entered.  </p>"},{"location":"getting_started/#notes","title":"Notes","text":"<ul> <li>Sometimes the first data message fails to send on setup. This is only after initial setup, with following messages successfully sent.</li> </ul>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#sparkfun-iot-node-lorawan","title":"SparkFun IoT Node - LoRaWAN","text":"<p>Firmware and associated Documentation and Firmware for the SparkFun IoT Node - LoRaWAN product</p> <p>This repository contains the latest firmware for the SparkFun IoT Node - LoRaWAN development board. While the IoT Node - LoRaWAN development board is programmable using Arduino, the IoT Node - LoRa board ships with a firmware application that enables rapid sensor definition and deployment on a Digi LoRaWAN XON network. This repository contains the source for this LoRaWAN application and well as firmware releases.</p> <p>The IoT Node - LoRaWAN firmware is pre-programmed to automatically log data from 25+ SparkFun Qwiic sensors, all without requiring any hardware setup or code development. Just plug in a qwiic board, and log data to the LoRaWAN network. The IoT Node - LoRaWAN board automatically detects the connected sensor, configures the device and enables logging to the serial console and, if connected, to the Digi LoRaWAN network.</p> <p>The SparkFun IoT Node - LoRaWAN board and firmware are designed to enable posting data to the LoRaWAN network within minutes, requiring no development or configuration. The SparkFun IoT Node - LoRaWAN board is configured to work with the Dig LoRaWAN network. Once the board is registered with your Digi XON account (via the on-board digital data tag - which is similar to a QR code), the board with this firmware should automatically connect to your Digi LoRaWAN account. Connect a supported qwiic sensor and data is automatically posted to the LoRaWAN network.</p> <p>The IoT Node - LoRaWAN firmware is highly configurable via an easily to use serial interface. Simply plug in a USB C cable and open a terminal at 115200 Kbps. By default the logging output is automatically streamed to the serial terminal - pressing any key will bring up the menu system.   </p>"},{"location":"introduction/#latest-firmware","title":"Latest Firmware","text":"<ul> <li>Version 01.01.00 - Release</li> </ul> <p>NOTE With firmware version v1.1.0 and above, the XBee LR module on the IoT Node - LoRaWAN board must be running firmware version A5013 - (May 1, 2025) or later. Details on the firmware and how to update are located here</p>"},{"location":"introduction/#documentation","title":"Documentation","text":"<ul> <li>Hardware Hookup Guide - Basic hookup guide for the SparkFun IoT Node - LoRaWAN board</li> <li>SparkFun IoT Node - LoRaWAN - Hardware Repo for the IoT Node board</li> </ul>"},{"location":"introduction/#supported-products","title":"Supported Products","text":"<ul> <li>DEV-26060 - SparkFun IoT Node - LoRaWAN</li> </ul>"},{"location":"introduction/#latest-release","title":"Latest Release","text":"<p>Details on the latest Firmware release are listed on the Release Page</p>"},{"location":"other_features/","title":"Additional Functionality","text":""},{"location":"other_features/#sending-data-to-the-iot-node-lorawan-board","title":"Sending Data to the IOT Node - LoRaWAN board","text":"<p>To demonstrate the ability to send commands to the IoT Node - LoRaWAN board, the firmware implements some simple commands to change the on-board RGB LED of the device. While simple, the commands demonstrate the flexibility of this functionality.</p>"},{"location":"other_features/#general-command-structure","title":"General Command Structure","text":"<p>The LED command structure consist of a set of Hex (number) codes sent to the target SparkFun IoT Node - LoRaWAN board via port 2 of the LoRaWAN connection. </p> <p>And example of this in the Digi XON control panel for a IoT Node - LoRaWAN device is shown in the following image:</p> <p></p> <p>This sends the command code 0x01FF0000, which turns on the on-board LED and sets the color red. Note - the port value is set to 2. </p> <p>Command codes have the following general structure:</p> <p>[Command Code - 1 byte][RGB Color - 3 bytes]</p> <p>The available command codes:</p> Code Payload Description 01 RGB value Turn on the LED, set to the provided RGB value 02 Turn off the LED 03 RGB Value Blink the LED using the provided RGB value 04 RGB Value Fast blink the LED using the provided RGB value 05 Brightness Set the brightness of the LED - a 1 byte value: 0 - 255"},{"location":"other_features/#button-events","title":"Button Events","text":"<p>The SparkFun IoT Node - LoRaWAN board has a \"user button\". When pressed, the button will perform the following actions:</p> Type Description Momentary Press When the button is momentary pressed, a log-event is triggered. Pressed and Held When the on-board is pressed and held down for 30 seconds, the IoT Node - LoRaWAN board is reset: settings are erased and the board restarted."},{"location":"other_features/#led-flashes","title":"LED Flashes","text":"<p>During the normal course of operation, the IoT Node - LoRaWAN board firmware will enable and flash the on-board LED as an operational indicator. The following table outlines what each LED value indicates:</p> Color Flash Description Green No System Startup White No Settings Menu is use Blue Blink Logging event triggered Green Blink Data sent to the LoRaWAN Yellow Flashing User button held down - faster blink over time Red Flashing User button held down - about to reset the board"},{"location":"settings_devices/","title":"IoT Node - LoRaWAN  - Device Settings","text":"<p>The device settings menu of the system presents the property pages for each device connected to the IoT Node - LoRaWAN board. </p> <p>The contents of the Device Settings page is dynamic and changes based on the devices connected to the board. The following is an example of a device settings listing page:</p> <p></p> <p>In this page, the devices MAX17948 and BME280 are listed. Selected an individual device entry will bring up the property page for that device.</p> <p>Below is the property page for the ***BME280** device:</p> <p></p> <p>While the contents of a specific device settings page is dependent on the particular device, each page as a common set of operations.</p>"},{"location":"settings_devices/#parameters","title":"Parameters","text":"<p>All devices have a set of parameters, as shown in the above device page for the BME280 device. </p> <p>Parameters can be enabled/disabled, controlling which values are output - logged to the Serial Console and sent to the LoRaWAN. </p> <p>Each device allows the enabling/disabling of individual parameters, but functions are also provided to enable or disable all parameters with one operation. </p> <p>When a parameter is disabled, it is highlighted on the devices settings page.</p>"},{"location":"settings_devices/#lorawan-sent-values","title":"LoRaWAN Sent Values","text":"<p>Not all parameters are sent via the LoRaWAN - only those that make sense for the limitations of the LoRaWAN system. To determine which values are sent, consult the Advanced section of this documentation, or enable verbose messaging and display a devices settings page. The format of this is shown in the settings page of the ENS160 device later on this page. </p>"},{"location":"settings_devices/#properties","title":"Properties","text":"<p>If a device as available properties, these are listed on the devices settings page. The following page shows properties and parameter settings for the ENS160 device.</p> <p></p> <p>The properties/settings behave just like any other setting within the system. Once set, if a device with the same name/type is loaded, the saved settings are applied at startup. </p>"},{"location":"settings_overview/","title":"Settings Overview","text":"<p>One of the unique features of the SparkFun IoT Node - LoRaWAN firmware is the interactive serial console menu system it provides. This dynamic system allows end user access to the operational settings of the system, without the requirement of additional software development or configuration files. Each subsystem and device within the framework has a set of operational properties and functions that are user accessible via the serial menu. </p>"},{"location":"settings_overview/#operation","title":"Operation","text":"<p>The operation menu is access from a serial console - connected to the IoT Node - LoRaWAN board via a USB-C connection. A modern/interactive console is required for this operation - which most modern implementations are. Examples include the scree and minicom commands on a Linux or macOS system, or TerraTerm on a Windows platform. </p>"},{"location":"settings_overview/#navigation","title":"Navigation","text":"<p>During normal operation, the IoT Node - LoRaWAN firmware will output startup information to the Serial console, followed by data log information every time a log event occurs. Once startup is completed, the serial menu can be entered by pressing any key except <code>!</code> (which allows entry of a console command) at the serial console. When pressed the top level of the menu system is present and will look similar to the following image.</p> <p></p> <p>The top menu outputs general information about the board and presents two options:</p> <ul> <li>1) Settings - System settings and operations</li> <li>2) Device Settings - Settings for connected devices</li> </ul> <p>To select a entry in a menu, press (or letter) the number corresponding to the menu entry. So in the above examples, pressing <code>1</code> will select the Settings menu, and pressing <code>2</code> selects the Device settings menu option. </p> <p>To exit a menu, press <code>x</code> (exit) at the top menu or <code>b</code> (back) at any level of the menu system. Additionally pressing the <code>escape</code> key will leave the current menu page, and if pressed on the top menu, any modified property values are not saved to on-board persistent storage. </p> <p>Note - if a menu is left in an idle state, the system will exit the current page after a timeout period.</p> <p>In the system there are to types of actionable entries - Properties or attributes of the system, and Functions, which execute a specific operation within the system. </p>"},{"location":"settings_overview/#properties-entry-and-editing","title":"Properties - Entry and Editing","text":"<p>Properties represent a particular setting or attribute of the system. They have default values as defined by the firmware application, but are user settable. Properties values are saved to the onboard flash storage of the IoT Node - LoRaWAN board, and as such persistent across device restarts.</p> <p>When a value is edited in the menu, any changes are saved when the menu system is normally exited - exiting with the escape key will not save any changes.</p> <p>When an individual entry is selected, a prompt which is based on the entry type, restrictions and value. </p>"},{"location":"settings_overview/#simple-prompt","title":"Simple Prompt","text":"<p>When entering a simple value, a basic prompt is presented, as shown in the following image, where the Name of the board is entered:</p> <p></p>"},{"location":"settings_overview/#data-range","title":"Data Range","text":"<p>Some values have a range limit - requiring the value being entered be within a specified set of limits. The following image shows a valid range of 1200 to 500000 for the Baud Rate property of the device.</p> <p></p>"},{"location":"settings_overview/#valid-value-limits","title":"Valid Value Limits","text":"<p>Properties can also have a specific set of valid values available. The following image show the valid values for logging output to the Serial Console. The selected value is limited to one of three values: 1 - Disabled, 2 - CSV Format and 3 - JSON Format. No other valid value is accepted by the system.</p> <p></p>"},{"location":"settings_overview/#functions","title":"Functions","text":"<p>Functions represent an action that is performed when selected and executed. When a function is selected, the user is always presented with a prompt. The prompt can be a simple \"Yes/No\" confirmation or or a specific value to pass to the function.</p> <p>The following image shows a set of Functions that either restart or reset the IoT Node - LoRaWAN device.</p> <p></p> <p>When a specific function is selected, as with the selection of \"Restart\" in the above list, the system prompts the user before executing the function.</p> <p></p> <p>Pressing 'Y' will execute the Restart Function in the above example - selecting 'n' or pressing the 'escape' key aborts the function call and returns to the menu system.</p>"},{"location":"settings_settings/","title":"IoT Node - LoRaWAN  - Settings","text":"<p>The following sections provide an overview of the available settings and functions within the settings menu of the IoT Node - LoRaWAN firmware.</p> <p>The settings system is divided into two sections - Settings and Device Settings as shown in the following image:</p> <p></p>"},{"location":"settings_settings/#settings-system-settings-and-operations","title":"Settings - System Settings and Operations","text":"<p>When this entry is selected, the following entries are presented:</p> <p></p>"},{"location":"settings_settings/#application-settings","title":"Application Settings","text":"<p>The Application Settings menu has the following entries:</p> <p></p>"},{"location":"settings_settings/#color-output","title":"Color Output","text":"<p>When enabled (the default), output to the console will use colors to highlight values and functionality. When disabled, all output is plain text. When using a limited serial console application, set this value to false.</p>"},{"location":"settings_settings/#board-name","title":"Board Name","text":"<p>Set this value any name desired for the particular board. By default this value is empty.</p>"},{"location":"settings_settings/#serial-console-format","title":"Serial Console Format","text":"<p>This property sets the output format for sensor/log data for the serial console. Available values include CSV, JSON and Disabled. The default value is CSV.</p>"},{"location":"settings_settings/#json-buffer-size","title":"JSON Buffer Size","text":"<p>This is the size - in bytes - the application should use when building JSON formatted output. The default value is 1600 bytes. This value should only be adjusted if logging a large number of values to the serial console. </p> <p>The maximum bytes used by the JSON system is displayed on the About page of the application (try using <code>!about</code> console command to see this value).</p>"},{"location":"settings_settings/#terminal-baud-rate","title":"Terminal Baud Rate","text":"<p>Use this value to change the baud rate settings for the serial console. Once changed this value might require a system restart to  take effect. The default value is 115200.</p>"},{"location":"settings_settings/#device-names","title":"Device Names","text":"<p>When enabled (default is disabled), attached devices have their address appended to the name. This is helpful to identify a particular board when two or more of the same board type are attached to the IoT Node board.</p>"},{"location":"settings_settings/#startup-delay","title":"Startup Delay","text":"<p>When the IoT Node board starts up, an startup menu is displayed. This settings determines how long to display this menu. Setting this value disables the menu. </p> <p>The startup menu has the following options:</p> <p></p> <p>Pressing the indicted menu key selects that option. If the startup delay expires, a normal startup sequence occurs.</p>"},{"location":"settings_settings/#startup-menu-entries","title":"Startup Menu Entries","text":"<ul> <li>'n' = Normal startup sequence </li> <li>'v' = Verbose output messaging is enabled at startup</li> <li>'a' = Disable qwiic device autoload </li> <li>'l' = List the available qwiic/i2c drivers at startup (this list is deleted after startup)</li> <li>'s' = Disable settings restore on startup </li> </ul>"},{"location":"settings_settings/#verbose-messages","title":"Verbose Messages","text":"<p>When enabled, verbose output is enabled. This value is disabled by default.</p>"},{"location":"settings_settings/#about","title":"About...","text":"<p>When selected, the system displays the About page for the application. This reflects the current status of system. This page is also displayed using the <code>!about</code> console command.</p>"},{"location":"settings_settings/#lorawan-network","title":"LoRaWAN Network","text":"<p>The LoRaWAN Network page has the following settings:</p> <p></p>"},{"location":"settings_settings/#enabled","title":"Enabled","text":"<p>Used to enable/disable the LoRaWAN network functionality. This value is enabled by default. </p>"},{"location":"settings_settings/#application-eui","title":"Application EUI","text":"<p>The Application EUI for the LoRaWAN connection</p>"},{"location":"settings_settings/#application-key","title":"Application Key","text":"<p>The Application Key for the LoRaWAN connection. This value is secret, and while editable, it is not visible when editing. </p>"},{"location":"settings_settings/#network-key","title":"Network Key","text":"<p>The Network Key for the LoRaWAN connection. This value is secret, and while editable, it is not visible when editing. </p>"},{"location":"settings_settings/#lorawan-class","title":"LoRaWAN Class","text":"<p>The operating class for the LoRaWAN module. By default this value is set to C.</p>"},{"location":"settings_settings/#lorawan-region","title":"LoRaWAN Region","text":"<p>The operating region for the LoRaWAN module. By default this value is US915. </p>"},{"location":"settings_settings/#reset","title":"Reset","text":"<p>Calls the reset function on the module. </p>"},{"location":"settings_settings/#lorawan-logger","title":"LoRaWAN Logger","text":"<p>This pages has no entires currently.</p>"},{"location":"settings_settings/#logger","title":"Logger","text":"<p>The logger system is used to output values to the Serial Console. </p> <p>The logger has the following settings:</p> <p></p>"},{"location":"settings_settings/#timestamp-mode","title":"Timestamp Mode","text":"<p>Enables output of a timestamp to the logged information and sets the format of the timestamp. By default this is disabled. </p>"},{"location":"settings_settings/#sample-numbering","title":"Sample Numbering","text":"<p>If enabled, a sample number is included in the console output of logged data. This value is disabled by default.</p>"},{"location":"settings_settings/#numbering-increment","title":"Numbering Increment","text":"<p>The amount to increment each sample number when sample numbering is enabled. The default value is 1.</p>"},{"location":"settings_settings/#output-id","title":"Output ID","text":"<p>When enabled, the board ID is included in the logged output. This value is disabled by default. </p>"},{"location":"settings_settings/#output-name","title":"Output Name","text":"<p>When enabled, the board Name is included in the logged output. This value is disabled by default.</p>"},{"location":"settings_settings/#rate-metic","title":"Rate Metic","text":"<p>When enabled, metrics are recorded for the logging system. This value is disabled by default.</p>"},{"location":"settings_settings/#reset-sample-counter","title":"Reset Sample Counter","text":"<p>Resets the data sample number to a user provided value. </p>"},{"location":"settings_settings/#logging-timer","title":"Logging Timer","text":"<p>The timer has the following properties:</p> <p></p>"},{"location":"settings_settings/#interval","title":"Interval","text":"<p>The interval for the logging timer. For every interval period, a logging event occurs - sending data to the LoRaWAN and serial console (if enabled).  The default value is 90000 ms.</p>"},{"location":"settings_settings/#system-control","title":"System Control","text":"<p>The System Control page includes the following entries:</p> <p></p>"},{"location":"settings_settings/#device-restart","title":"Device Restart","text":"<p>When selected, the user is prompted to restart the device/system. This is also available using the <code>!restart</code> console command.</p>"},{"location":"settings_settings/#device-reset","title":"Device Reset","text":"<p>When selected, the user is prompted to reset the device/system. A device reset erases the current saved settings values and restarts the board/system. This is also available using the <code>!reset-device</code> console command.</p>"},{"location":"settings_settings/#time-setup","title":"Time Setup","text":"<p>By default the IOT Node - LoRaWAN is not connected to a timekeeping source and defaults to a start time value of January 1, 1970 (epoch value of 0). But if a time keeping device is added (GNSS or Real Time Clock), this page is used to set time parameters for the board.</p> <p>The Time Setup property page has the following entries:</p> <p></p>"},{"location":"settings_settings/#time-zone","title":"Time Zone","text":"<p>The timezone specification string to use for the system clock. By default, the Mountain Time zone (the zone of SparkFun) is used. </p>"},{"location":"settings_settings/#reference-clock","title":"Reference Clock","text":"<p>If a reference clock device is connected to the IoT Node board, use this option to select this clock. </p>"},{"location":"settings_settings/#update-interval","title":"Update Interval","text":"<p>Specify how often the system clock is updated using the reference clock in minutes.</p>"},{"location":"settings_settings/#enable-clock-fallback","title":"Enable Clock Fallback","text":"<p>Adds a secondary reference clock to use if the primary clock becomes unavailable. </p>"},{"location":"settings_settings/#dependant-interval","title":"Dependant Interval","text":"<p>If a dependant clock is connected (a clock being set by the system clock), this value sets how often the dependant clock device is updated.</p>"},{"location":"settings_settings/#update-connected","title":"Update Connected","text":"<p>If enabled, any connected clocks have their time updated when the system clock is updated.</p>"},{"location":"settings_settings/#save-settings","title":"Save Settings","text":"<p>The Save Settings system is designed to include a \"fallback\" settings system if available. Normally this might be a JSON file on a SDCard or similar device. At launch, this functionality is not available for the IoT Node - LoRaWAN board.</p> <p>The Save Settings property page has the following elements:</p> <p></p>"},{"location":"settings_settings/#fallback-restore","title":"Fallback Restore","text":"<p>If enabled, restore settings from the fallback system if the primary storage system is unavailable or empty. </p>"},{"location":"settings_settings/#fallback-save","title":"Fallback Save","text":"<p>If enabled and a fallback device is available, saving settings to primary storage also saves them to the secondary device.</p>"},{"location":"settings_settings/#buffer-size","title":"Buffer Size","text":"<p>The buffer size used for internal I/O operations. This is not used for the IoT Node Board. </p>"},{"location":"settings_settings/#save-settings_1","title":"Save Settings","text":"<p>When called, the current value of the systems settings is saved to the primary persistent storage system.</p>"},{"location":"settings_settings/#restore-settings","title":"Restore Settings","text":"<p>When called, systems settings are restore from the primary storage system.</p>"},{"location":"settings_settings/#clear-settings","title":"Clear Settings","text":"<p>When called, the primary (on board) settings storage is erased/reset.</p>"},{"location":"settings_settings/#save-to-fallback","title":"Save to Fallback","text":"<p>If a fallback device is available, when this function is called, system settings are saved to the fallback device.</p>"},{"location":"settings_settings/#restore-from-fallback","title":"Restore from Fallback","text":"<p>If a fallback device is available, when this function is called, system settings are restored from the fallback device.</p>"},{"location":"single_page/","title":"Introduction","text":""},{"location":"single_page/#sparkfun-iot-node-lorawan","title":"SparkFun IoT Node - LoRaWAN","text":"<p>Firmware and associated Documentation and Firmware for the SparkFun IoT Node - LoRaWAN product</p> <p>This repository contains the latest firmware for the SparkFun IoT Node - LoRaWAN development board. While the IoT Node - LoRaWAN development board is programmable using Arduino, the IoT Node - LoRa board ships with a firmware application that enables rapid sensor definition and deployment on a Digi LoRaWAN XON network. This repository contains the source for this LoRaWAN application and well as firmware releases.</p> <p>The IoT Node - LoRaWAN firmware is pre-programmed to automatically log data from 25+ SparkFun Qwiic sensors, all without requiring any hardware setup or code development. Just plug in a qwiic board, and log data to the LoRaWAN network. The IoT Node - LoRaWAN board automatically detects the connected sensor, configures the device and enables logging to the serial console and, if connected, to the Digi LoRaWAN network.</p> <p>The SparkFun IoT Node - LoRaWAN board and firmware are designed to enable posting data to the LoRaWAN network within minutes, requiring no development or configuration. The SparkFun IoT Node - LoRaWAN board is configured to work with the Dig LoRaWAN network. Once the board is registered with your Digi XON account (via the on-board digital data tag - which is similar to a QR code), the board with this firmware should automatically connect to your Digi LoRaWAN account. Connect a supported qwiic sensor and data is automatically posted to the LoRaWAN network.</p> <p>The IoT Node - LoRaWAN firmware is highly configurable via an easily to use serial interface. Simply plug in a USB C cable and open a terminal at 115200 Kbps. By default the logging output is automatically streamed to the serial terminal - pressing any key will bring up the menu system.   </p>"},{"location":"single_page/#latest-firmware","title":"Latest Firmware","text":"<ul> <li>Version 01.01.00 - Release</li> </ul> <p>NOTE With firmware version v1.1.0 and above, the XBee LR module on the IoT Node - LoRaWAN board must be running firmware version A5013 - (May 1, 2025) or later. Details on the firmware and how to update are located here</p>"},{"location":"single_page/#documentation","title":"Documentation","text":"<ul> <li>Hardware Hookup Guide - Basic hookup guide for the SparkFun IoT Node - LoRaWAN board</li> <li>SparkFun IoT Node - LoRaWAN - Hardware Repo for the IoT Node board</li> </ul>"},{"location":"single_page/#supported-products","title":"Supported Products","text":"<ul> <li>DEV-26060 - SparkFun IoT Node - LoRaWAN</li> </ul>"},{"location":"single_page/#latest-release","title":"Latest Release","text":"<p>Details on the latest Firmware release are listed on the Release Page</p>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":""},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":""},{"location":"single_page/#arduino-example","title":"Arduino Example","text":""},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>### Not working as expected and need help?</p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p>If you don't find what you need there, the SparkFun Forums  are a great place to find and ask for help. If this is your first visit, you'll need to create a forum account to search product forums and post questions.</p>"},{"location":"single_page/#resources","title":"Resources","text":""},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>### Not working as expected and need help?</p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p>If you don't find what you need there, the SparkFun Forums  are a great place to find and ask for help. If this is your first visit, you'll need to create a forum account to search product forums and post questions.</p>"},{"location":"verbose_output/","title":"Verbose Output","text":"<p>For advanced work with the firmware, enabling Verbose Mode is incredibly helpful. This is especially true for data encoding and transmission. </p> <p>When verbose messaging is enabled, verbose messages are prefixed with a [V] and Debug messages are prefixed with a [D].</p>"},{"location":"verbose_output/#enabling-verbose-mode","title":"Enabling verbose Mode","text":"<p>There are three main methods to enable verbose mode:</p> Location Details Settings Menu Settings&gt;Application Settings &gt; Verbose Messages. Enabled/Disable Verbose Messaging. This setting will persist across restarts. !!verbose Console Command This toggles verbose messages and is not persistent Start Menu - Select option 'v' Enables verbose messages before system startup. This value is not persistent"},{"location":"verbose_output/#output-lorawan-encoding","title":"Output LoRaWAN Encoding","text":"<p>When verbose messaging is enabled, when a loRaWAN message is packed, the packed values and the overall payload is output. </p> <p>The following is an example of output for two data values:</p> <p></p> <p>In this example, verbose output is enabled using the console command !verbose, and a logging event triggered using !log-now. </p> <p>Two sensor values are packed for transmission - Humidity and TemperatureF. The verbose message output includes the Value Type/ID for each data value, as well as the encoded value in hexadecimal. </p> <p>And once a LoRaWAN data payload is sent, the entire 11 byte payload is output, along with it's send status and associated frame ID. </p>"},{"location":"verbose_output/#device-value-type-ids","title":"Device Value Type IDs","text":"<p>For each supported device, a subset of parameters are enabled for LoRaWAN transmission. With verbose output enabled, these parameters are indicated by having a Value Type ID when viewed in on a device settings page. </p> <p>The following is an example of the Value Type codes for the BME280 device:</p> <p></p> <p>On this page, the parameters that have Value Types codes are enabled for LoRaWAN transmission. </p>"},{"location":"verbose_output/#disabled-parameters","title":"Disabled Parameters","text":"<p>Note - Parameters that are disabled are not sent to the LoRaWAN.</p>"},{"location":"verbose_output/#startup-messages","title":"Startup Messages","text":"<p>If Verbose Output is enabled and save in the system settings, or if the [v]erbose startup mode was selected, some addition messages are output during the startup sequence. </p> <p>And example of startup messages:</p> <p></p> <p>In this example, \"Verbose Output\" was enabled in the system settings, and is noted on startup. </p> <p>Several Debug messages related to some settings not saved/restore - but these can easily be ignored. </p> <p>Additional information is output when connected to the LoRaWAN network, including the device EUID, and what operating class the LoRaWAN module is set to. </p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun IoT Node - LoRaWAN firmware repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun IoT Node - LoRaWAN repository.</li> </ul>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun IoT Node - LoRaWAN repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}